<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="heritrix-crawl-filter" default="jar" basedir="."
         xmlns:ivy="antlib:org.apache.ivy.ant">

    <description>Heritrix-Crawl-Filter</description>
    <property name="version" value="0.1" />

    <property name="src"           location="src" />
    <property name="test"          location="src/test" />
    <property name="config"        location="config" />
    <property name="build"         location="build" />
    <property name="build.classes" location="${build}/classes"/>
    <property name="build.test.classes" location="${build}/test-classes"/>
    <property name="lib"           location="lib" />

    <!-- ivy properties -->
    <property name="ivy.version" value="2.1.0" />
    <property name="ivy.dir" location="${build}/ivy" />
    <property name="ivy.jar" location="${ivy.dir}/ivy-${ivy.version}.jar"/>
    <property name="ivy.lib.dir" location="${lib}" />
    <property name="ivy_repo_url" value="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"/>
    <property name="ivysettings.xml" location="${ivy.dir}/ivysettings.xml" />

    <target name="init">
      <tstamp />
      <mkdir dir="${build}" />
      <mkdir dir="${build}/output" />
      <mkdir dir="${build.classes}" />
      <mkdir dir="${build.test.classes}"/>
      <mkdir dir="${ivy.dir}" />
      <mkdir dir="${ivy.lib.dir}" />
      <!--
          Allow Ivy to be disabled with "-Dnoivy=".
          It is kind of a hack to pretend that we already found it,
          but Ant doesn't provide an easy way of blocking dependencies
          from executing or checking multiple conditions.
        -->
      <condition property="ivy.found"><isset property="noivy" /></condition>
      <condition property="offline"><isset property="noivy" /></condition>
    </target>


    <target name="ivy-download"  description="To download ivy" unless="offline">
      <get src="${ivy_repo_url}" dest="${ivy.jar}" usetimestamp="true"/>
    </target>

    <target name="ivy-probe-antlib">
      <condition property="ivy.found">
        <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
      </condition>
    </target>

    <target name="ivy-init-antlib" depends="ivy-download,ivy-probe-antlib" unless="ivy.found">
      <typedef uri="antlib:org.apache.ivy.ant" onerror="fail"
               loaderRef="ivyLoader">
        <classpath>
          <pathelement location="${ivy.jar}"/>
        </classpath>
      </typedef>
      <fail>
        <condition >
          <not>
            <typefound uri="antlib:org.apache.ivy.ant" name="cleancache"/>
          </not>
        </condition>
        You need Apache Ivy 2.0 or later from http://ant.apache.org/
        It could not be loaded from ${ivy_repo_url}
      </fail>
    </target>

    <target name="resolve" depends="ivy-init-antlib" description="retrieve dependencies with ivy" unless="noivy">
      <ivy:configure file="ivysettings.xml" />
      <ivy:retrieve />
    </target>


    <path id="autoivy.classpath">
      <fileset dir="${ivy.lib.dir}">
        <include name="**/*.jar" />
      </fileset>
    </path>

    <!-- ===========================  -->

    <path id="project.classpath">
      <pathelement location="${build.classes}"/>
      <pathelement location="${build.test.classes}"/>
      <pathelement location="${config}"/>
      <fileset dir="${lib}">
        <include name="**/*.jar" />
      </fileset>
      <path refid="autoivy.classpath" />
    </path>


    <target name="compile" depends="init,resolve">
      <javac debug="true" destdir="${build.classes}">
        <src path="${src}"/>
        <classpath refid="project.classpath"/>
      </javac>
    </target>

    <target name="compile.tests" depends="compile">
      <javac debug="true" destdir="${build.test.classes}">
        <src path="${test}"/>
        <classpath refid="project.classpath"/>
      </javac>
    </target>


    <target name="test" depends="compile.tests">
      <echo message="running tests"/>
      <mkdir dir="${build}/output"/>
      <junit fork="on" failureproperty="testfailed">
        <classpath refid="project.classpath"/>
        <formatter type="xml" usefile="true"/>
        <formatter type="brief" usefile="false"/>

        <batchtest todir="${build}/output">
          <fileset dir="${build.test.classes}" includes="**/*Test*" />
        </batchtest>
      </junit>
      <fail if="testfailed" message="Some test(s) failed."/>
    </target>

    <target name="jar" depends="compile,compile.tests">
      <jar jarfile="${project.name}-${version}.jar" basedir="${build.classes}" />
      <jar jarfile="${project.name}-${version}-tests.jar" basedir="${build.test.classes}" />
    </target>

    <target name="clean">
      <delete dir="${build}" />
      <delete file="*.jar" />
    </target>

</project>
